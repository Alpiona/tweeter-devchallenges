generator client {
  provider = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "orderByRelation"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Profile {
  id                                      Int             @id @default(autoincrement())
  username                                String          @unique
  name                                    String?
  email                                   String          @unique
  description                             String?
  profileImage                           String?          @map(name: "profile_image")
  backgroundImage                        String?         @map(name: "background_image")
  createdAt                              DateTime        @default(now()) @map(name: "created_at")
  updatedAt                              DateTime        @updatedAt @map(name: "updated_at")
  deletedAt                              DateTime?        @map(name: "deleted_at")
  followers                                Profile[]      @relation("follows")
  following                               Profile[]     @relation("follows")
  retweets                                 Tweet[]        @relation("retweet")
  tweets                                   Tweet[]
  comments                              Comment[]
  comment_likes                         Comment[]         @relation("comment_likes")
  tweetLikes                             Tweet[]          @relation("tweet_likes")
  tweetSaves                             Tweet[]          @relation("tweet_saves")

  @@map(name: "profile")
}

model Hashtag {
  id            Int             @id @default(autoincrement())
  content       String           @unique
  tweets Tweet[]         @relation("hashtags")

  @@map(name: "hashtag")
}


model Tweet {
  id            Int             @id @default(autoincrement())
  profileId    Int            @map(name: "profile_id")
  content       String
  isPublic      Boolean         @map(name: "is_public")
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @updatedAt @map(name: "updated_at")
  deletedAt     DateTime?        @map(name: "deleted_at")
  profile       Profile         @relation(fields: [profileId], references: [id])
  retweeters    Profile[]    @relation("retweet")
  comments      Comment[]   @relation("comment")
  hashtags      Hashtag[]     @relation("hashtags")
  images        TweetImage[]
  likes         Profile[]     @relation("tweet_likes")
  saves         Profile[]     @relation("tweet_saves")

  @@map(name: "tweet")
}

model Comment {
  id          Int       @id @default(autoincrement())
  tweetId    Int        @map(name: "tweet_id")
  profileId  Int        @map(name: "profile_id")
  content     String
  image       String?
  createdAt   DateTime        @default(now()) @map(name: "created_at")
  updatedAt   DateTime        @updatedAt @map(name: "updated_at")
  deletedAt   DateTime?        @map(name: "deleted_at")
  profile     Profile   @relation(fields: [profileId], references: [id])
  tweet       Tweet     @relation("comment", fields: [tweetId], references: [id])
  likes Profile[]      @relation("comment_likes")

  @@map(name: "tweet_comment")
}

model TweetImage {
  id         Int       @id @default(autoincrement())
  tweetId   Int       @map(name: "tweet_id")
  content    String
  createdAt  DateTime        @default(now()) @map(name: "created_at")
  updatedAt  DateTime        @updatedAt @map(name: "updated_at")
  deletedAt  DateTime?        @map(name: "deleted_at")
  tweet      Tweet     @relation(fields: [tweetId], references: [id])

  @@map(name: "tweet_image")
}
